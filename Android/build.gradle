apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

dependencies {
    compile files('libs/droneapi-java.jar')
    compile 'com.google.android.gms:play-services:6.1.71'
    compile 'com.android.support:support-v4:21.0.2'
    compile 'com.android.support:appcompat-v7:21.0.2'
    compile 'com.android.support:cardview-v7:21.0.0'

    compile project(':Core')
    compile project(':Mavlink')

    compile files('libs/j2xx.jar')
    compile files('libs/protobuf-java-2.5.0.jar')
    compile files('libs/jeromq-0.3.4.jar')

    compile project(':Libraries:usb-serial-for-android:UsbSerialLibrary')
    compile project(':Libraries:3DR-Services-Library:lib')
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        applicationId 'org.droidplanner.services.android'
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 4
        versionName getGitVersion()
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    //FIXME: remove this after lint errors have been taken care of
    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile getAppKeystoreFile()
            storePassword getAppKeystorePassword()
            keyAlias getAppKey()
            keyPassword getAppKeyPassword()
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def file = output.outputFile
                    if (file != null && file.name.endsWith('.apk')) {
                        def versionCode = defaultConfig.versionCode
                        output.outputFile = new File(file.parent, "3dr_services.${versionCode}.apk")
                    }
                }
            }
        }
    }
}

/**
 * @return The most recent git tag to be used as version name for the app.
 */
def getGitVersion() {
    def cmd = "git describe --tag --dirty"
    try {
        def proc = cmd.execute()
        return proc.text.trim()
    } catch (IOException e) {
        //Unable to find 'git'
        return "please update version name manually"
    }
}

def getAppKeystoreFile() {
    def filePath = System.getenv("ANDROID_3DR_SERVICES_KEYSTORE")
    return filePath ? file(filePath) : null
}

def getAppKeystorePassword(){
    def password = System.getenv("ANDROID_3DR_SERVICES_KEYSTORE_PWD")
    return password ?: ""
}

def getAppKeyPassword() {
    def password = System.getenv("ANDROID_3DR_SERVICES_KEY_PWD")
    return password ?: ""
}

def getAppKey() {
    def alias = System.getenv("ANDROID_3DR_SERVICES_KEYALIAS")
    return alias ?: ""
}
