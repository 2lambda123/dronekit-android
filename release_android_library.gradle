apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

def publishFlag = false
def projectGroupId = 'com.o3dr'
def projectArtifactId = project.PUBLISH_ARTIFACT_ID
def projectVersion = project.PUBLISH_VERSION
def projectDescription = project.PROJECT_DESCRIPTION
def projectLabels = project.PROJECT_LABELS
def projectLicenses = project.PROJECT_LICENSES

task androidJavadocs(type: Javadoc){
    source = android.sourceSets.main.java.srcDirs
    exclude '**/*.aidl'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs){
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar){
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

publishing {
    publications {
        mavenLibraryRelease(MavenPublication){
            groupId projectGroupId
            artifactId projectArtifactId
            version projectVersion

            artifact "build/outputs/aar/${PUBLISH_ARTIFACT_ID}.${PUBLISH_VERSION}.aar"

            artifact androidSourcesJar {
                classifier 'sources'
            }

            artifact androidJavadocsJar {
                classifier 'javadoc'
            }
        }
    }
}

bintray {
    user = getMavenUsername()
    key = getMavenApiKey()

    publications = ['mavenLibraryRelease'] //When uploading Maven-based publication files
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = publishFlag //If version should be auto published after an upload

    pkg {
        repo = getMavenRepo()
        name = projectArtifactId
        desc = projectDescription
        websiteUrl = 'https://github.com/DroidPlanner/3DRServices'
        issueTrackerUrl = 'https://github.com/DroidPlanner/3DRServices/issues'
        vcsUrl = 'https://github.com/DroidPlanner/3DRServices.git'
        licenses = projectLicenses
        labels = projectLabels
        publicDownloadNumbers = true

        //Optional version descriptor
        version {
            name = projectVersion //Bintray logical version name
        }
    }
}

bintrayUpload.dependsOn(publishToMavenLocal)

def getMavenUsername(){
    return hasProperty('COM_O3DR_MAVEN_USERNAME') ? COM_O3DR_MAVEN_USERNAME : ''
}

def getMavenApiKey(){
    return hasProperty('COM_O3DR_MAVEN_APIKEY') ? COM_O3DR_MAVEN_APIKEY : ''
}

def getMavenRepo(){
    return hasProperty('COM_O3DR_MAVEN_REPO') ? COM_O3DR_MAVEN_REPO : ''
}