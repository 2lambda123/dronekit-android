apply plugin: 'com.android.library'

ext {
    VERSION_MAJOR = 0
    VERSION_MINOR = 0
    VERSION_PATCH = 0
    VERSION_SUFFIX = "alpha1"

    PUBLISH_ARTIFACT_ID = 'tower-lib'
    PUBLISH_VERSION = generateVersionName("", VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, VERSION_SUFFIX)
    PUBLISH_VERSION_CODE = computeVersionCode(VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH)
    PROJECT_DESCRIPTION = "Tower Library."
    PROJECT_LABELS = ['DroneCode', '3DR', 'Tower', 'DroneAPI', 'Android', 'DroneKit']
    PROJECT_LICENSES = ['Apache-2.0']
}

//Log levels values
def logLevelVerbose = 2;
def logLevelDebug = 3;
def logLevelInfo = 4;
def logLevelWarn = 5;
def logLevelError = 6;
def logLevelAssert = 7;

android {
    compileSdkVersion android_build_sdk_version
    buildToolsVersion android_build_tools_version

    defaultConfig {
        minSdkVersion android_build_min_sdk_version
        targetSdkVersion android_build_target_sdk_version

        versionCode PUBLISH_VERSION_CODE
        versionName PUBLISH_VERSION

        //Build config fields
        buildConfigField "boolean", "SITL_DEBUG", "false"
        buildConfigField "String", "SOLO_LINK_IP", getSoloLinkIp()
        buildConfigField "boolean", "WRITE_LOG_FILE", "false"
        buildConfigField "int", "LOG_FILE_LEVEL", "$logLevelDebug"
        buildConfigField "boolean", "ENABLE_CRASHLYTICS", "false"
    }

    sourceSets {
        main {
            aidl.srcDirs = ['src/main/java']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    android.libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            if (file != null && file.name.endsWith('.aar')) {
                output.outputFile = new File(file.parent, "${PUBLISH_ARTIFACT_ID}.${PUBLISH_VERSION}.aar")
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            buildConfigField "boolean", "WRITE_LOG_FILE", "true"
        }

        release {
            buildConfigField "boolean", "ENABLE_CRASHLYTICS", "true"
        }
    }
}

dependencies {
    compile 'com.jakewharton.timber:timber:3.1.0'
    compile "com.android.support:support-v4:${support_lib_version}"
    compile "com.android.support:appcompat-v7:${support_lib_version}"

    compile "com.google.android.gms:play-services-analytics:${play_services_version}"
    compile "com.google.android.gms:play-services-base:${play_services_version}"
    compile "com.google.android.gms:play-services-location:${play_services_version}"

    //Java semver library
    compile 'com.github.zafarkhaja:java-semver:0.9.0'

    compile 'com.jcraft:jsch:0.1.51'

    //MP4 generation library
    compile 'com.googlecode.mp4parser:isoparser:1.1.7'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    debugCompile project(':Mavlink')
    releaseCompile files('libs/Mavlink.jar')

    compile files('libs/d2xx.jar')

    debugCompile project(':UsbSerialLibrary')
    releaseCompile project(':UsbSerialLibrary')
}

def getSoloLinkIp() {
    return '\"10.1.1.10\"'
}

def getLocalIp() {
    try {
        return '\"' + InetAddress.getLocalHost().getCanonicalHostName() + '\"'
    }catch(Exception e){
        return '\"\"'
    }
}

assemble.dependsOn ':Mavlink:jar'

apply from: "../release_android_library.gradle"